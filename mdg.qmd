---
title: "Categorical"
format: html
jupyter: python3
---

```{python}
import pandas as pd
from sklearn.preprocessing import LabelEncoder, OrdinalEncoder, OneHotEncoder, StandardScaler
from sklearn.compose import ColumnTransformer
```


```{python}
data = {
    'size' : ['M', 'L', 'S'],
    'color':['green', 'red', 'blue'],
    'price':[10.1, 13.5, 15.6],
    'label':['pantalones', 'camiseta', 'camiseta']
}

df = pd.DataFrame(data)
df
```

# Column transformers

```{python}
categorical_features = ['color']
ordinal_features = ['size']
numerical_features = ['price']
size_order = [['S','M','L']]

preprocessor = ColumnTransformer (
    transformers=[
        ('color_onehot', OneHotEncoder(),),
        ('size_ordenc', OrdinalEncoder(categories=size_order), ordinal_features),
        ('price_stan', StandardScaler(),numerical_features)

    ]
)
```

```{python}
import pandas as pd
from sklearn.datasets import fetch_openml
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import OneHotEncoder, OrdinalEncoder, LabelEncoder, StandardScaler
from sklearn.compose import ColumnTransformer
from sklearn.metrics import classification_report, ConfusionMatrixDisplay
```

# cargar dataset
```{python}
data = fetch_openml('adult', version=2, as_frame=True)
df = data.frame.copy()
df
```

```{python}
df = df.dropna()
```

```{python}
X = df.drop("class", axis=1)
y = df["class"]
```

```{python}
X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2,random_state=42,stratify=y)
```

```{python}
#for i in df['education'].unique():
 #   print(i)

education_order = ["Preschool",
                    "1st-4th",
                    "5th-6th",
                    "7th-8th",
                    "9th",
                    "10th",
                    "11th",
                    "12th",
                    "HS-grad",
                    "Some-college",
                    "Assoc-acdm",
                    "Assoc-voc",
                    "Prof-school",
                    "Bachelors",
                    "Masters",
                    "Doctorate"]
```

```{python}
categorical_columns = X.select_dtypes(include='category').columns.tolist()

categorical_columns_nominal = [col for col in categorical_columns if col != 'education']
categorical_columns_nominal

numerical_columns = X.select_dtypes(include='number').columns.tolist()
```

```{python}
processor = ColumnTransformer(
    transformers=[
        ('num', StandardScaler(), numerical_columns),
        ('edu', OrdinalEncoder(categories=[education_order]), ['education']),
        ['onehot', OneHotEncoder(handle_unknown='ignore'), categorical_columns_nominal]

    ]
)
```

```{python}
label_target_encoded = LabelEncoder()
y_train_encoded = label_target_encoded.fit_transform(y_train)
y_test_encoded = label_target_encoded.fit_transform(y_test)
```

```{python}
#pipeline
pipeline = Pipeline([
    ('preprocesamiento', processor),
    ('classifier', LogisticRegression(max_iter=10000))
])
```

```{python}
pipeline.fit(X_train,y_train_encoded)
```

```{python}
y_pred = pipeline.predict(X_test)
```

```{python}
print(classification_report(y_test_encoded,y_pred,target_names=label_target_encoded.classes_))
```

```{python}
ConfusionMatrixDisplay.from_predictions(y_test_encoded,y_pred)
```
